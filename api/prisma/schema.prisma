generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String?          @unique
  password       String?
  createdAt      DateTime        @default(now())
  profilePicture String?
  role           UserRole
  articles       Article[]
  cleanwalks     CleanwalkUser[]
  organization   Organization?
  refreshTokens  RefreshToken[]
}

model Organization {
  userId       Int       @id
  description  String?
  webSite      String?
  socialMedias Json?
  bannerImg    String?
  lastEvent    DateTime?
  user         User      @relation(fields: [userId], references: [id])
}

model Cleanwalk {
  id           Int             @id @default(autoincrement())
  name         String
  posLat       Float
  posLong      Float
  dateBegin    DateTime
  imgUrl       String?
  duration     Int
  description  String
  address      String
  cityId       Int
  city         City            @relation(fields: [cityId], references: [id])
  participants CleanwalkUser[]
}

model CleanwalkUser {
  userId      Int
  cleanwalkId Int
  nbPerson    Int
  isHost      Boolean
  cleanwalk   Cleanwalk @relation(fields: [cleanwalkId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@id([userId, cleanwalkId])
}

model Article {
  id             Int               @id @default(autoincrement())
  title          String
  authorId       Int
  content        Json
  createdAt      DateTime          @default(now())
  description    String
  published      Boolean
  previewPicture String?
  author         User              @relation(fields: [authorId], references: [id])
  categories     CategoryArticle[]
}

model City {
  id         Int         @id @default(autoincrement())
  name       String
  cleanwalks Cleanwalk[]
}

model Category {
  id       Int               @id @default(autoincrement())
  category String
  articles CategoryArticle[]
}

model CategoryArticle {
  categoryId Int
  articleId  Int
  article    Article  @relation(fields: [articleId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([categoryId, articleId])
}

enum UserRole {
  USER
  ADMIN
  ASSOCIATION
}
